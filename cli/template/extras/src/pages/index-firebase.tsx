import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { api } from "~/utils/api";
import { auth } from "~/lib/firebase";
import { 
  signInWithEmailAndPassword, 
  createUserWithEmailAndPassword,
  signInWithPopup,
  GoogleAuthProvider,
  signOut as firebaseSignOut,
  onAuthStateChanged
} from "firebase/auth";
import { useEffect } from "react";
import type { User } from "firebase/auth";

export default function Home() {
  const [user, setUser] = useState<User | null>(null);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isSignUp, setIsSignUp] = useState(false);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  // Listen to auth state changes
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      setUser(firebaseUser);
      
      // If user is logged in, get their ID token for tRPC calls
      if (firebaseUser) {
        const token = await firebaseUser.getIdToken();
        // Store token in localStorage or context for tRPC client to use
        localStorage.setItem("firebaseToken", token);
      } else {
        localStorage.removeItem("firebaseToken");
      }
    });

    return () => unsubscribe();
  }, []);

  // Example tRPC queries
  const { data: posts, refetch: refetchPosts } = api.post.getAll.useQuery(
    { limit: 5, published: true },
    { enabled: true }
  );

  const { data: myPosts, refetch: refetchMyPosts } = api.post.getMyPosts.useQuery(
    undefined,
    { enabled: !!user }
  );

  // Example tRPC mutations
  const createPost = api.post.create.useMutation({
    onSuccess: () => {
      void refetchPosts();
      void refetchMyPosts();
    },
  });

  const deletePost = api.post.delete.useMutation({
    onSuccess: () => {
      void refetchPosts();
      void refetchMyPosts();
    },
  });

  // Firebase Auth handlers
  const handleEmailAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      if (isSignUp) {
        await createUserWithEmailAndPassword(auth, email, password);
      } else {
        await signInWithEmailAndPassword(auth, email, password);
      }
      setEmail("");
      setPassword("");
    } catch (err: any) {
      setError(err.message || "Authentication failed");
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setLoading(true);
    setError("");
    
    try {
      const provider = new GoogleAuthProvider();
      await signInWithPopup(auth, provider);
    } catch (err: any) {
      setError(err.message || "Google sign-in failed");
    } finally {
      setLoading(false);
    }
  };

  const handleSignOut = async () => {
    try {
      await firebaseSignOut(auth);
      localStorage.removeItem("firebaseToken");
    } catch (err: any) {
      setError(err.message || "Sign out failed");
    }
  };

  const handleCreatePost = () => {
    const title = prompt("Enter post title:");
    const content = prompt("Enter post content:");
    
    if (title && content) {
      createPost.mutate({
        title,
        content,
        published: true,
        tags: ["example", "firebase"],
      });
    }
  };

  return (
    <>
      <Head>
        <title>Create T3 Fire App</title>
        <meta name="description" content="Generated by create-t3-fire" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> Fire
          </h1>
          
          <div className="flex flex-col items-center gap-8">
            {/* Auth Section */}
            {!user ? (
              <div className="w-full max-w-md">
                <form onSubmit={handleEmailAuth} className="flex flex-col gap-4 rounded-xl bg-white/10 p-8">
                  <h2 className="text-2xl font-bold text-white">
                    {isSignUp ? "Sign Up" : "Sign In"}
                  </h2>
                  
                  {error && (
                    <p className="text-red-400">{error}</p>
                  )}
                  
                  <input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="rounded px-4 py-2 text-black"
                    required
                  />
                  
                  <input
                    type="password"
                    placeholder="Password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="rounded px-4 py-2 text-black"
                    required
                  />
                  
                  <button
                    type="submit"
                    disabled={loading}
                    className="rounded bg-white/10 px-4 py-2 font-semibold text-white hover:bg-white/20 disabled:opacity-50"
                  >
                    {loading ? "Loading..." : (isSignUp ? "Sign Up" : "Sign In")}
                  </button>
                  
                  <button
                    type="button"
                    onClick={() => setIsSignUp(!isSignUp)}
                    className="text-sm text-white/70 hover:text-white"
                  >
                    {isSignUp ? "Already have an account? Sign In" : "Need an account? Sign Up"}
                  </button>
                  
                  <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                      <div className="w-full border-t border-white/20"></div>
                    </div>
                    <div className="relative flex justify-center text-sm">
                      <span className="bg-[#15162c] px-2 text-white/70">Or</span>
                    </div>
                  </div>
                  
                  <button
                    type="button"
                    onClick={handleGoogleSignIn}
                    disabled={loading}
                    className="flex items-center justify-center gap-2 rounded bg-white px-4 py-2 font-semibold text-black hover:bg-white/90 disabled:opacity-50"
                  >
                    <svg className="h-5 w-5" viewBox="0 0 24 24">
                      <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                      <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                      <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                      <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                    </svg>
                    Sign in with Google
                  </button>
                </form>
              </div>
            ) : (
              <div className="flex flex-col items-center gap-4">
                <p className="text-xl text-white">
                  Welcome, {user.displayName || user.email}!
                </p>
                <button
                  onClick={handleSignOut}
                  className="rounded bg-white/10 px-4 py-2 font-semibold text-white hover:bg-white/20"
                >
                  Sign Out
                </button>
                
                <button
                  onClick={handleCreatePost}
                  className="rounded bg-blue-600 px-4 py-2 font-semibold text-white hover:bg-blue-700"
                >
                  Create New Post
                </button>
              </div>
            )}
            
            {/* Posts Section */}
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
              <div className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white">
                <h3 className="text-xl font-bold">Public Posts</h3>
                {posts?.map((post) => (
                  <div key={post.id} className="border-t border-white/20 pt-2">
                    <h4 className="font-semibold">{post.title}</h4>
                    <p className="text-sm text-white/70">{post.content}</p>
                    <p className="text-xs text-white/50">
                      By {post.authorName} â€¢ {post.likes} likes
                    </p>
                  </div>
                ))}
                {!posts?.length && (
                  <p className="text-white/50">No posts yet</p>
                )}
              </div>
              
              {user && (
                <div className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white">
                  <h3 className="text-xl font-bold">My Posts</h3>
                  {myPosts?.map((post) => (
                    <div key={post.id} className="border-t border-white/20 pt-2">
                      <h4 className="font-semibold">{post.title}</h4>
                      <p className="text-sm text-white/70">{post.content}</p>
                      <button
                        onClick={() => deletePost.mutate({ id: post.id })}
                        className="text-xs text-red-400 hover:text-red-300"
                      >
                        Delete
                      </button>
                    </div>
                  ))}
                  {!myPosts?.length && (
                    <p className="text-white/50">You haven't created any posts yet</p>
                  )}
                </div>
              )}
            </div>
            
            {/* Stack Info */}
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-3 md:gap-8">
              <Link
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                href="https://firebase.google.com"
                target="_blank"
              >
                <h3 className="text-2xl font-bold">Firebase â†’</h3>
                <div className="text-lg">
                  Authentication, Firestore database, and hosting for your app.
                </div>
              </Link>
              
              <Link
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                href="https://create.t3.gg/en/usage/first-steps"
                target="_blank"
              >
                <h3 className="text-2xl font-bold">First Steps â†’</h3>
                <div className="text-lg">
                  Just the basics - Everything you need to know to set up your database and authentication.
                </div>
              </Link>
              
              <Link
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                href="https://create.t3.gg/en/introduction"
                target="_blank"
              >
                <h3 className="text-2xl font-bold">Documentation â†’</h3>
                <div className="text-lg">
                  Learn more about Create T3 App, the libraries it uses, and how to deploy it.
                </div>
              </Link>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}